####################################################################################
# Create a set of newick trees with a random set of nodes based on the original structure
# of the PSB tree.
# This will be used as an inpuit for Visual TreeCmp to calculate distances between
# the reference tree and the random trees and trees without horizontall transferred regions.
# The discance values will be then plotted as a distribution to understand how different
# the experimental tree really is from the original tree.
####################################################################################

import numpy as np
import random

# Original SRB tree
# (outgroup,((PB76,((PB18,(CGTACTAG-AAGGAGTA,(GTAGAGGA-AGAGTAGA,(PB10,(PB34,(GTAGAGGA-TATCCTCT,PB25)))))),(PB27,((CGTACTAG-CTAAGCCT,(AGGCAGAA-GTAAGGAG,TAAGGCGA-TATCCTCT)),(PB90,(TAAGGCGA-CTAAGCCT,(GTAGAGGA-TAGATCGC,((CGTACTAG-GTAAGGAG,CGTACTAG-TATCCTCT),(AGGCAGAA-TATCCTCT,(PB50,PB82)))))))))),((PB44,(CGTACTAG-CTCTCTAT,(PB_3,(PB43,(CGTACTAG-TAGATCGC,((CGTACTAG-AGAGTAGA,(CGTACTAG-ACTGCATA,TCCTGAGC-TATCCTCT)),(TAAGGCGA-AAGGAGTA,(AGGCAGAA-AGAGTAGA,PB66)))))))),((PB41,TCCTGAGC-GTAAGGAG),(AGGCAGAA-AAGGAGTA,(PB42,((PB84,(PB_4,((PB33,(GTAGAGGA-CTCTCTAT,(PB53,(AGGCAGAA-TAGATCGC,(AGGCAGAA-CTCTCTAT,(PB83,(TAAGGCGA-ACTGCATA,TAAGGCGA-CTCTCTAT))))))),(TCCTGAGC-AGAGTAGA,(PB58,TCCTGAGC-ACTGCATA))))),((PB21,PB57),((GGACTCCT-CTAAGCCT,((PB29,PB35),(PB45,(PB77,((GGACTCCT-ACTGCATA,GGACTCCT-TAGATCGC),(PB93,(CTCTCTAC-TAGATCGC,PB11))))))),(CAGAGAGG-CTAAGCCT,((PB85,TCCTGAGC-CTAAGCCT),((CAGAGAGG-CTCTCTAT,CTCTCTAC-CTCTCTAT),(((CAGAGAGG-ACTGCATA,(CAGAGAGG-AGAGTAGA,CAGAGAGG-TAGATCGC)),((PB64,(PB79,(PB16,(PB40,PB88)))),(PB32,((PB39,(GCTACGCT-ACTGCATA,(AAGAGGCA-CTAAGCCT,(AAGAGGCA-TATCCTCT,(AAGAGGCA-CTCTCTAT,(CTCTCTAC-TATCCTCT,(CAGAGAGG-AAGGAGTA,CAGAGAGG-GTAAGGAG))))))),(AAGAGGCA-GTAAGGAG,(AAGAGGCA-TAGATCGC,PB87)))))),(CTCTCTAC-AGAGTAGA,(CAGAGAGG-TATCCTCT,((PB37,PB_5),(CTCTCTAC-ACTGCATA,CTCTCTAC-CTAAGCCT)))))))))))))))));
# Code for the more complex tree simulations
node_set = ['outgroup','PB76','PB18','CGTACTAG-AAGGAGTA','GTAGAGGA-AGAGTAGA','PB10','PB34','GTAGAGGA-TATCCTCT','PB25','PB27','CGTACTAG-CTAAGCCT','AGGCAGAA-GTAAGGAG','TAAGGCGA-TATCCTCT','PB90','TAAGGCGA-CTAAGCCT','GTAGAGGA-TAGATCGC','CGTACTAG-GTAAGGAG','CGTACTAG-TATCCTCT','AGGCAGAA-TATCCTCT','PB50','PB82','PB44','CGTACTAG-CTCTCTAT','PB_3','PB43','CGTACTAG-TAGATCGC','CGTACTAG-AGAGTAGA','CGTACTAG-ACTGCATA','TCCTGAGC-TATCCTCT','TAAGGCGA-AAGGAGTA','AGGCAGAA-AGAGTAGA','PB66','PB41','TCCTGAGC-GTAAGGAG','AGGCAGAA-AAGGAGTA','PB42','PB84','PB_4','PB33','GTAGAGGA-CTCTCTAT','PB53','AGGCAGAA-TAGATCGC','AGGCAGAA-CTCTCTAT','PB83','TAAGGCGA-ACTGCATA','TAAGGCGA-CTCTCTAT','TCCTGAGC-AGAGTAGA','PB58','TCCTGAGC-ACTGCATA','PB21','PB57','GGACTCCT-CTAAGCCT','PB29','PB35','PB45','PB77','GGACTCCT-ACTGCATA','GGACTCCT-TAGATCGC','PB93','CTCTCTAC-TAGATCGC','PB11','CAGAGAGG-CTAAGCCT','PB85','TCCTGAGC-CTAAGCCT','CAGAGAGG-CTCTCTAT','CTCTCTAC-CTCTCTAT','CAGAGAGG-ACTGCATA','CAGAGAGG-AGAGTAGA','CAGAGAGG-TAGATCGC','PB64','PB79','PB16','PB40','PB88','PB32','PB39','GCTACGCT-ACTGCATA','AAGAGGCA-CTAAGCCT','AAGAGGCA-TATCCTCT','AAGAGGCA-CTCTCTAT','CTCTCTAC-TATCCTCT','CAGAGAGG-AAGGAGTA','CAGAGAGG-GTAAGGAG','AAGAGGCA-GTAAGGAG','AAGAGGCA-TAGATCGC','PB87','CTCTCTAC-AGAGTAGA','CAGAGAGG-TATCCTCT','PB37','PB_5','CTCTCTAC-ACTGCATA','CTCTCTAC-CTAAGCCT']
n = 1000
random_trees = []
#print(len(node_set))

#structure = 
structure = "(xxx,((xxx,((xxx,(xxx,(xxx,(xxx,(xxx,(xxx,xxx)))))),(xxx,((xxx,(xxx,xxx)),(xxx,(xxx,(xxx,((xxx,xxx),(xxx,(xxx,xxx)))))))))),((xxx,(xxx,(xxx,(xxx,(xxx,((xxx,(xxx,xxx)),(xxx,(xxx,xxx)))))))),((xxx,xxx),(xxx,(xxx,((xxx,(xxx,((xxx,(xxx,(xxx,(xxx,(xxx,(xxx,(xxx,xxx))))))),(xxx,(xxx,xxx))))),((xxx,xxx),((xxx,((xxx,xxx),(xxx,(xxx,((xxx,xxx),(xxx,(xxx,xxx))))))),(xxx,((xxx,xxx),((xxx,xxx),(((xxx,(xxx,xxx)),((xxx,(xxx,(xxx,(xxx,xxx)))),(xxx,((xxx,(xxx,(xxx,(xxx,(xxx,(xxx,(xxx,xxx))))))),(xxx,(xxx,xxx)))))),(xxx,(xxx,((xxx,xxx),(xxx,xxx)))))))))))))))));"
structure = structure.split('xxx')

for i in range(0, n):
    random.shuffle(node_set)

    newick_tree = []
    for j in range(0, len(node_set)):
        newick_tree.append(structure[j]) 
        newick_tree.append(node_set[j])
    
    
    newick_tree.append(structure[-1])
    newick_tree_str = "".join(newick_tree)
    random_trees.append(newick_tree_str)

outfile = "/home/ada/Desktop/PinkBerry_scripts_paper/srb_scripts/phylogenetic_trees/tree_comparisons/SRB_random_trees.txt"
out = open(outfile, 'w')
for i in random_trees:
    out.write(i + '\n')


# No F clade SNPs tree
# (outgroup,((PB76,((CGTACTAG-AAGGAGTA,(GTAGAGGA-AGAGTAGA,(PB10,(PB34,(GTAGAGGA-TATCCTCT,PB25))))),(PB18,(PB90,(PB27,((TAAGGCGA-CTAAGCCT,(GTAGAGGA-TAGATCGC,(PB82,(PB50,(AGGCAGAA-TATCCTCT,(CGTACTAG-GTAAGGAG,CGTACTAG-TATCCTCT))-05)))),(TAAGGCGA-TATCCTCT,(AGGCAGAA-GTAAGGAG,CGTACTAG-CTAAGCCT))))))-05)),((PB44,(CGTACTAG-CTCTCTAT,(PB_3,((CGTACTAG-TAGATCGC,(TAAGGCGA-AAGGAGTA,(CGTACTAG-AGAGTAGA,(CGTACTAG-ACTGCATA,TCCTGAGC-TATCCTCT)))),(AGGCAGAA-AGAGTAGA,PB43))))),((PB41,TCCTGAGC-GTAAGGAG),(AGGCAGAA-AAGGAGTA,(PB42,((PB84,(PB_4,((PB33,(GTAGAGGA-CTCTCTAT,(PB53,(AGGCAGAA-TAGATCGC,(AGGCAGAA-CTCTCTAT,(PB83,(TAAGGCGA-ACTGCATA,TAAGGCGA-CTCTCTAT))))))),(TCCTGAGC-AGAGTAGA,(PB58,TCCTGAGC-ACTGCATA))))),((PB21,PB57),((((AAGAGGCA-TAGATCGC,PB87),(AAGAGGCA-GTAAGGAG,(PB32,(PB64,(PB79,(PB16,(PB40,PB88))))))),(CTCTCTAC-AGAGTAGA,((CAGAGAGG-ACTGCATA,(CAGAGAGG-AGAGTAGA,CAGAGAGG-TAGATCGC)),(PB39,(GCTACGCT-ACTGCATA,(AAGAGGCA-CTAAGCCT,(AAGAGGCA-TATCCTCT,(AAGAGGCA-CTCTCTAT,(CTCTCTAC-TATCCTCT,(CAGAGAGG-AAGGAGTA,CAGAGAGG-GTAAGGAG)))))))))),((GGACTCCT-CTAAGCCT,(CAGAGAGG-CTCTCTAT,CTCTCTAC-CTCTCTAT)),(CAGAGAGG-CTAAGCCT,((PB85,TCCTGAGC-CTAAGCCT),(((PB29,PB35),(PB77,((GGACTCCT-ACTGCATA,GGACTCCT-TAGATCGC),(PB93,(CTCTCTAC-TAGATCGC,PB11))))),(PB45,(CAGAGAGG-TATCCTCT,((PB37,PB_5),(CTCTCTAC-ACTGCATA,CTCTCTAC-CTAAGCCT)))))))))))))))));

# No basal AB clade SNPs tree
# (outgroup,((CGTACTAG-GTAAGGAG,CGTACTAG-TATCCTCT),(AGGCAGAA-TATCCTCT,((PB50,PB82),(GTAGAGGA-TAGATCGC,(TAAGGCGA-CTAAGCCT,((PB27,PB90),(CGTACTAG-CTAAGCCT,(AGGCAGAA-GTAAGGAG,(TAAGGCGA-TATCCTCT,(PB18,((PB76,((PB44,(PB_3,(CGTACTAG-CTCTCTAT,(PB43,(CGTACTAG-TAGATCGC,((CGTACTAG-AGAGTAGA,(CGTACTAG-ACTGCATA,TCCTGAGC-TATCCTCT)),(TAAGGCGA-AAGGAGTA,(AGGCAGAA-AGAGTAGA,PB66)))))))),(AGGCAGAA-AAGGAGTA,PB42))),(CGTACTAG-AAGGAGTA,(GTAGAGGA-AGAGTAGA,(PB10,(PB34,(GTAGAGGA-TATCCTCT,(PB25,((PB41,TCCTGAGC-GTAAGGAG),(GGACTCCT-CTAAGCCT,((PB84,(PB_4,((PB33,(GTAGAGGA-CTCTCTAT,(PB53,(AGGCAGAA-TAGATCGC,(AGGCAGAA-CTCTCTAT,(PB83,(TAAGGCGA-ACTGCATA,TAAGGCGA-CTCTCTAT))))))),(TCCTGAGC-AGAGTAGA,(PB58,TCCTGAGC-ACTGCATA))))),((PB21,PB57),((CAGAGAGG-CTAAGCCT,(PB85,TCCTGAGC-CTAAGCCT)),(((PB45,(CAGAGAGG-TATCCTCT,((PB37,PB_5),(CTCTCTAC-ACTGCATA,CTCTCTAC-CTAAGCCT)))),((PB29,PB35),(PB77,((GGACTCCT-ACTGCATA,GGACTCCT-TAGATCGC),(PB93,(CTCTCTAC-TAGATCGC,PB11)))))),((CAGAGAGG-CTCTCTAT,CTCTCTAC-CTCTCTAT),(CTCTCTAC-AGAGTAGA,((CAGAGAGG-ACTGCATA,(CAGAGAGG-AGAGTAGA,CAGAGAGG-TAGATCGC)),((PB64,(PB79,(PB16,(PB40,PB88)))),((AAGAGGCA-GTAAGGAG,(AAGAGGCA-TAGATCGC,PB87)),(PB32,(PB39,(GCTACGCT-ACTGCATA,(AAGAGGCA-CTAAGCCT,(AAGAGGCA-TATCCTCT,(AAGAGGCA-CTCTCTAT,(CTCTCTAC-TATCCTCT,(CAGAGAGG-AAGGAGTA,CAGAGAGG-GTAAGGAG)))))))))))))))))))))))))))))))))))));

# No top AB clade SNPs tree
# (outgroup,(PB58,(TCCTGAGC-ACTGCATA,((PB_4,(PB42,(((PB41,TCCTGAGC-GTAAGGAG),(PB44,(PB_3,(CGTACTAG-CTCTCTAT,((PB43,(AGGCAGAA-AGAGTAGA,PB66)),(CGTACTAG-TAGATCGC,(CGTACTAG-AGAGTAGA,(TAAGGCGA-AAGGAGTA,(CGTACTAG-ACTGCATA,TCCTGAGC-TATCCTCT))))))))),(AGGCAGAA-AAGGAGTA,(PB76,((PB18,(CGTACTAG-AAGGAGTA,(GTAGAGGA-AGAGTAGA,(PB10,(PB34,(GTAGAGGA-TATCCTCT,PB25)))))),((AGGCAGAA-GTAAGGAG,TAAGGCGA-TATCCTCT),(CGTACTAG-CTAAGCCT,(PB27,(PB90,(TAAGGCGA-CTAAGCCT,(GTAGAGGA-TAGATCGC,((CGTACTAG-GTAAGGAG,CGTACTAG-TATCCTCT),(AGGCAGAA-TATCCTCT,(PB50,PB82))))))))))))))),(PB84,(TCCTGAGC-AGAGTAGA,((PB33,((GTAGAGGA-CTCTCTAT,PB53),(AGGCAGAA-TAGATCGC,(AGGCAGAA-CTCTCTAT,(PB83,(TAAGGCGA-ACTGCATA,TAAGGCGA-CTCTCTAT)))))),((PB21,PB57),(GGACTCCT-CTAAGCCT,(((PB29,PB35),(PB45,(PB77,((GGACTCCT-ACTGCATA,GGACTCCT-TAGATCGC),(PB93,(CTCTCTAC-TAGATCGC,PB11)))))),((CAGAGAGG-CTAAGCCT,(PB85,TCCTGAGC-CTAAGCCT)),((CAGAGAGG-CTCTCTAT,CTCTCTAC-CTCTCTAT),(((CAGAGAGG-ACTGCATA,(CAGAGAGG-AGAGTAGA,CAGAGAGG-TAGATCGC)),((PB64,(PB79,(PB16,(PB40,PB88)))),(AAGAGGCA-GTAAGGAG,(PB32,((AAGAGGCA-TAGATCGC,PB87),(PB39,(GCTACGCT-ACTGCATA,(AAGAGGCA-CTAAGCCT,(AAGAGGCA-TATCCTCT,(AAGAGGCA-CTCTCTAT,(CTCTCTAC-TATCCTCT,(CAGAGAGG-AAGGAGTA,CAGAGAGG-GTAAGGAG)))))))))))),(CTCTCTAC-AGAGTAGA,(CAGAGAGG-TATCCTCT,((PB37,PB_5),(CTCTCTAC-ACTGCATA,CTCTCTAC-CTAAGCCT)))))))))))))))));

# No all clades SNPs tree
# (outgroup,(PB58,(TCCTGAGC-ACTGCATA,((PB42,(((PB41,TCCTGAGC-GTAAGGAG),(PB44,(PB_3,(CGTACTAG-CTCTCTAT,((CGTACTAG-AGAGTAGA,(TAAGGCGA-AAGGAGTA,(CGTACTAG-TAGATCGC,(CGTACTAG-ACTGCATA,TCCTGAGC-TATCCTCT)))),(PB43,(AGGCAGAA-AGAGTAGA,PB66))))))),(AGGCAGAA-AAGGAGTA,(PB76,((PB18,(CGTACTAG-AAGGAGTA,(GTAGAGGA-AGAGTAGA,(PB10,(PB34,(GTAGAGGA-TATCCTCT,PB25)))))),((AGGCAGAA-GTAAGGAG,TAAGGCGA-TATCCTCT),(CGTACTAG-CTAAGCCT,(PB27,(PB90,(TAAGGCGA-CTAAGCCT,(GTAGAGGA-TAGATCGC,((CGTACTAG-GTAAGGAG,CGTACTAG-TATCCTCT),(AGGCAGAA-TATCCTCT,(PB50,PB82)))))))))))))),(PB_4,((PB84,TCCTGAGC-AGAGTAGA),(GGACTCCT-CTAAGCCT,((PB21,PB57),((PB33,((GTAGAGGA-CTCTCTAT,PB53),(AGGCAGAA-TAGATCGC,(AGGCAGAA-CTCTCTAT,(PB83,(TAAGGCGA-ACTGCATA,TAAGGCGA-CTCTCTAT)))))),((CTCTCTAC-AGAGTAGA,((AAGAGGCA-TAGATCGC,PB87),(((CAGAGAGG-ACTGCATA,(CAGAGAGG-AGAGTAGA,CAGAGAGG-TAGATCGC)),(PB39,(GCTACGCT-ACTGCATA,(AAGAGGCA-CTAAGCCT,(AAGAGGCA-CTCTCTAT,(AAGAGGCA-TATCCTCT,(CTCTCTAC-TATCCTCT,(CAGAGAGG-AAGGAGTA,CAGAGAGG-GTAAGGAG)))))))),(AAGAGGCA-GTAAGGAG,(PB32,(PB64,(PB79,(PB16,(PB40,PB88))))))))),((CAGAGAGG-CTCTCTAT,CTCTCTAC-CTCTCTAT),((CAGAGAGG-CTAAGCCT,(PB85,TCCTGAGC-CTAAGCCT)),(((PB29,PB35),(PB77,((GGACTCCT-ACTGCATA,GGACTCCT-TAGATCGC),(PB93,(CTCTCTAC-TAGATCGC,PB11))))),(PB45,(CAGAGAGG-TATCCTCT,((PB37,PB_5),(CTCTCTAC-ACTGCATA,CTCTCTAC-CTAAGCCT)))))))))))))))));